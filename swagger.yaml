swagger: "2.0"
info:
  description: Sending emails via SMTP
  title: sendmail
  version: "1.0"
  x-direktiv-meta:
    container: gcr.io/direktiv/functions/sendmail
    maintainer: |-
      [direktiv.io](https://www.direktiv.io) 
    issues: https://github.com/direktiv-apps/sendmail/issues
    url: https://github.com/direktiv-apps/sendmail  
    categories:
    - social
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: >-
      This function uses s-nail to send emails via SMTP. It supports CC, BCC and attachments. 

      It is required to name the message `message`. Alternatively the message can be a Direktiv attribute stored as `message`.

      For Gmail an `App password` has to be created under the account using this function: (Google Account Admin)[https://myaccount.google.com/security].

consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          default: development
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          default: /tmp
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            required: ["smtp", "emails"]
            properties:
              smtp:
                type: object
                required: ["server", "user", "password"]
                properties:
                  server:
                    type: string
                    description: SMTP server address
                    example: smtp.sendgrid.net:587 
                  user: 
                    type: string
                    description: User name for the SMTP server
                  password:
                    type: string
                    description: Password for the SMTP server
              emails:
                type: array
                description: List of emails to send.
                items:
                  type: object
                  required: ["from", "to"]
                  properties:
                    from:
                      type: string
                      description: Name used as `from` value, e.g. "My Name\<myname@direktiv.io\>"
                    to: 
                      type: array
                      description: Email addresses to send email to
                      items:
                        type: string
                    cc: 
                      type: array
                      description: Email addresses to send email to (carbon copy)
                      items:
                        type: string
                    bcc: 
                      type: array
                      description: Email addresses to send email to (blind copy)
                      items:
                        type: string
                    subject:
                      type: string
                      description: Subject of the email
                    message:
                      $ref: '#/definitions/direktivFile'
                    attachments:
                      type: array
                      items:
                        type: string
                      description: Files to attach to the email. Can be provided with Direktiv action `files`
                    verbose:
                      type: boolean
                      description: Enable debug output
      # direktiv code generation is configured here
      x-direktiv-function: |-
        functions:
        - id: sendmail
          image: gcr.io/direktiv/functions/sendmail:1.0
          type: knative-workflow
      x-direktiv-examples:
        - title: Basic Email
          content: |-
            - id: values
              type: noop
              transform:
                name: Direktiv
              transition: sendmail
            - id: sendmail
              type: action
              action:
                function: sendmail
                secrets: ["smtppwd"]
                input: 
                  smtp:
                    server: smtp.gmail.com:587
                    user: jens.gerke@direktiv.io
                    password: jq(.secrets.smtppwd)
                  emails:
                  - from: Jens Gerke<jens.gerke@direktiv.io>
                    to:
                    - jens.gerke@direktiv.io
                    cc:
                    - jens.gerke@direktiv.io
                    subject: This Is A Message
                    message:
                      name: message
                      data: |-
                        Hello jq(.name),

                        this is an email.

                        Good Bye
        - title: Emails with attachment
          content: |-
            - id: sendmail
              type: action
              action:
                function: sendmail
                secrets: ["smtppwd"]
                input: 
                  smtp:
                    server: smtp.gmail.com:587
                    user: jens.gerke@direktiv.io
                    password: jq(.secrets.smtppwd)
                  emails:
                  - from: Jens Gerke<jens.gerke@direktiv.io>
                    to: 
                    - jens.gerke@direktiv.io
                    attachments:
                    - message
                    subject: This Is A Message
                    message:
                      name: message
                      data: |-
                        This is the text and the attachment
      x-direktiv-secrets:
        - name: smtppwd
          description: SMTP password
      x-direktiv:  
        cmds:
        - action: exec
          exec: /replace.sh '{{ .SMTP.Server }}' '{{ .SMTP.User }}' '{{ .SMTP.Password }}'
          print: false
          silent: true
        - action: foreach
          loop: .Emails
          exec: |- 
            bash -c 'cat message | s-nail {{- if .Item.Verbose }} -vv {{- end }} -r "{{ .Item.From }}" -A mail {{- if .Item.Subject }} -s "{{ .Item.Subject }}" {{- end }} 
            {{- range $i, $a := .Item.Bcc }} -b {{ $a }} {{- end }}
            {{- range $i, $a := .Item.Cc }} -c {{ $a }} {{- end }}
            {{- range $i, $a := .Item.Attachments }} -a {{ $a }} {{- end }}
            {{- range $i, $a := .Item.To }} {{ $a }} {{- end }}'
          env: ["MAILRC=account.config"]
          print: true
          silent: false
        output: |
          {
            "sendmail": {{ index . 1 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
          description: Output of executed email commands.
          examples:
            sendmail:
            - result: 
              success: true
          schema:
            type: object
            properties:
              sendmail:
                type: array
                items:
                  type: object
                  required:
                  - success
                  - result
                  properties:
                    success:
                      type: boolean
                    result:
                      additionalProperties: {}
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
