// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/direktiv/apps/go/pkg/apps"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostParamsBodyEmailsItems post params body emails items
//
// swagger:model postParamsBodyEmailsItems
type PostParamsBodyEmailsItems struct {

	// Files to attach to the email. Can be provided with Direktiv action `files`
	Attachments []string `json:"attachments"`

	// Email addresses to send email to (blind copy)
	Bcc []string `json:"bcc"`

	// Email addresses to send email to (carbon copy)
	Cc []string `json:"cc"`

	// Content-Type of the message, e.g. text/html
	ContentType *string `json:"contentType,omitempty"`

	// Name used as `from` value, e.g. "My Name\<myname@direktiv.io\>"
	// Required: true
	From *string `json:"from"`

	// message
	Message apps.DirektivFile `json:"message,omitempty"`

	// Subject of the email
	Subject string `json:"subject,omitempty"`

	// Email addresses to send email to
	// Required: true
	To []string `json:"to"`

	// Enable debug output
	Verbose bool `json:"verbose,omitempty"`
}

// Validate validates this post params body emails items
func (m *PostParamsBodyEmailsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostParamsBodyEmailsItems) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *PostParamsBodyEmailsItems) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if err := m.Message.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("message")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("message")
		}
		return err
	}

	return nil
}

func (m *PostParamsBodyEmailsItems) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post params body emails items based on the context it is used
func (m *PostParamsBodyEmailsItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostParamsBodyEmailsItems) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Message.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("message")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("message")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostParamsBodyEmailsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostParamsBodyEmailsItems) UnmarshalBinary(b []byte) error {
	var res PostParamsBodyEmailsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
